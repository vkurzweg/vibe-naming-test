import React from 'react';
import { Container, Row, Col, Card, Spinner, Alert } from 'react-bootstrap';
import { getStatusColor } from '../../theme/newColorPalette';
import NamingGuidelines from '../NamingGuidelines/NamingGuidelines';
import DynamicFormRenderer from '../DynamicForm/DynamicFormRenderer';
import StatusProgressionStepper from '../StatusProgression/StatusProgressionStepper';
import { useMyRequests, useAllRequests, useRequestActions } from '../../hooks/useRequestManagement';

// Import Material UI components for better status display
import { Box, Typography, Chip, Paper, Grid, Button } from '@mui/material';

const ContentArea = ({ role, context, requests, isLoading, activeFormConfig, onContextChange }) => {
  // Use React Query hooks for data fetching
  const { data: myRequests, isLoading: isLoadingMyRequests } = useMyRequests();
  const { data: allRequests, isLoading: isLoadingAllRequests } = useAllRequests();
  const requestActions = useRequestActions();

  // Use appropriate data source based on role
  const effectiveRequests = role === 'submitter' ? (myRequests || requests) : (allRequests || requests);
  const effectiveLoading = role === 'submitter' ? isLoadingMyRequests : isLoadingAllRequests;

  // Get most recent active request for submitters
  const getMostRecentActiveRequest = () => {
    if (!effectiveRequests || effectiveRequests.length === 0) return null;
    
    // Filter out cancelled and rejected requests, then sort by creation date
    const activeRequests = effectiveRequests.filter(req => 
      !['cancelled', 'rejected'].includes(req.status)
    );
    
    if (activeRequests.length === 0) return null;
    
    return activeRequests.sort((a, b) => 
      new Date(b.createdAt || b.created_at) - new Date(a.createdAt || a.created_at)
    )[0];
  };

  // Format date for display
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  // Get status badge variant
  const getStatusBadge = (status) => {
    return status === 'approved' ? 'success' : 'secondary';
  };

  // Render loading state
  const renderLoading = () => (
    <Box display="flex" flexDirection="column" alignItems="center" justifyContent="center" minHeight="200px">
      <Spinner animation="border" variant="primary" />
      <Typography variant="body2" sx={{ mt: 2, color: 'text.secondary' }}>Loading...</Typography>
    </Box>
  );

  // Render empty state
  const renderEmptyState = (title, description, actionLabel, actionHandler) => (
    <div className="empty-state">
      <div className="empty-state-content">
        <h3 className="typography-h3">{title}</h3>
        <p className="typography-body text-muted">{description}</p>
        {actionLabel && actionHandler && (
          <Button variant="primary" onClick={actionHandler} className="mt-3">
            {actionLabel}
          </Button>
        )}
      </div>
    </div>
  );

  // Render single request with dynamic form and status progression
  const renderRequestDetail = (request) => (
    <Paper elevation={1} sx={{ p: 3, mb: 3 }}>
      <Grid container spacing={3}>
        {/* Left side: Request data using dynamic form */}
        <Grid item xs={12} md={8}>
          <Typography variant="h6" gutterBottom>
            {request.title || 'Naming Request'}
          </Typography>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Submitted {formatDate(request.createdAt || request.created_at)} by {request.user?.name || request.submitterName || 'Unknown User'}
          </Typography>
          
          {/* Dynamic form renderer for request data */}
          <Box mt={2}>
            <DynamicFormRenderer
              formConfig={activeFormConfig}
              formData={request.formData || {}}
              role={role}
              readonly={role === 'submitter' && !['draft', 'submitted'].includes(request.status)}
              showSubmitButton={false}
            />
          </Box>
        </Grid>
        
        {/* Right side: Status progression */}
        <Grid item xs={12} md={4}>
          <StatusProgressionStepper
            status={request.status}
            timestamps={{
              submitted: request.submittedAt || request.createdAt,
              under_review: request.reviewStartedAt,
              final_review: request.finalReviewStartedAt,
              approved: request.approvedAt,
              rejected: request.rejectedAt,
              cancelled: request.cancelledAt,
              on_hold: request.heldAt
            }}
            orientation="vertical"
            compact={false}
          />
          
          {/* Action buttons for reviewers/admins */}
          {(role === 'reviewer' || role === 'admin') && (
            <Box mt={3}>
              <Button
                variant="contained"
                size="small"
                onClick={() => requestActions.claimRequest({ 
                  requestId: request._id,
                  reviewerId: 'current-user-id', // TODO: Get from auth context
                  reviewerName: 'Current User' // TODO: Get from auth context
                })}
                disabled={requestActions.isClaiming}
                sx={{ mr: 1, mb: 1 }}
              >
                Claim
              </Button>
              <Button
                variant="outlined"
                size="small"
                onClick={() => requestActions.holdRequest({ 
                  requestId: request._id,
                  reason: 'Needs additional information'
                })}
                disabled={requestActions.isHolding}
                sx={{ mr: 1, mb: 1 }}
              >
                Hold
              </Button>
            </Box>
          )}
          
          {/* Cancel button for submitters */}
          {role === 'submitter' && ['submitted', 'under_review'].includes(request.status) && (
            <Box mt={3}>
              <Button
                variant="outlined"
                color="error"
                size="small"
                onClick={() => requestActions.cancelRequest({ 
                  requestId: request._id,
                  reason: 'Cancelled by submitter'
                })}
                disabled={requestActions.isCancelling}
              >
                Cancel Request
              </Button>
            </Box>
          )}
        </Grid>
      </Grid>
    </Paper>
  );

  // Render request list for reviewers/admins
  const renderRequestList = (filteredRequests, showActions = false) => (
    <div className="request-list">
      {filteredRequests.map((request) => (
        <Paper key={request._id} elevation={1} sx={{ p: 2, mb: 2 }}>
          <Grid container spacing={2} alignItems="center">
            <Grid item xs={12} sm={6}>
              <Typography variant="h6">
                {request.title || 'Untitled Request'}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Submitted {formatDate(request.createdAt)} by {request.user?.name || 'Unknown User'}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={3}>
              <Chip
                label={request.status?.replace('_', ' ').toUpperCase() || 'UNKNOWN'}
                sx={{
                  backgroundColor: getStatusColor(request.status),
                  color: '#fff',
                  fontWeight: 600
                }}
              />
            </Grid>
            <Grid item xs={12} sm={3}>
              {showActions && (
                <Box>
                  <Button variant="outlined" size="small" sx={{ mr: 1 }}>
                    Review
                  </Button>
                  <Button variant="outlined" size="small">
                    Details
                  </Button>
                </Box>
              )}
            </Grid>
          </Grid>
        </Paper>
      ))}
    </div>
  );

  // Render overview content
  const renderOverview = () => {
    if (effectiveLoading || isLoading) {
      return renderLoading();
    }

    // For submitters: show most recent active request or naming guidelines
    if (role === 'submitter') {
      const mostRecentRequest = getMostRecentActiveRequest();
      
      return (
        <div className="overview-content">
          <div className="content-header mb-4">
            <Typography variant="h4" gutterBottom>
              Your Dashboard
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {mostRecentRequest ? 'Your most recent active request' : 'Welcome to the naming system'}
            </Typography>
          </div>

          {mostRecentRequest ? (
            renderRequestDetail(mostRecentRequest)
          ) : (
            <Box>
              <NamingGuidelines onSubmitClick={() => onContextChange('submit')} />
            </Box>
          )}
        </div>
      );
    }

    // For reviewers/admins: show recent activity and key metrics
    const recentRequests = effectiveRequests.slice(0, 5);
    
    return (
      <div className="overview-content">
        <div className="content-header mb-4">
          <Typography variant="h4" gutterBottom>
            {role === 'admin' ? 'System Overview' : 'Review Dashboard'}
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Recent activity and pending reviews
          </Typography>
        </div>

        {recentRequests.length > 0 ? (
          <>
            <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>
              Recent Requests
            </Typography>
            {renderRequestList(recentRequests, true)}
          </>
        ) : (
          renderEmptyState(
            'No Recent Activity',
            'No requests have been submitted recently.',
            null,
            null
          )
        )}
      </div>
    );
  };
            <Card className="overview-card">
              <Card.Header>
                <h4 className="typography-h3">Quick Stats</h4>
              </Card.Header>
              <Card.Body>
                <div className="stats-list">
                  <div className="stat-item">
                    <span className="stat-value typography-h3">{requests.length}</span>
                    <span className="stat-label typography-caption">Total Requests</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-value typography-h3">
                      {requests.filter(r => r.status === 'approved').length}
                    </span>
                    <span className="stat-label typography-caption">Approved</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-value typography-h3">
                      {requests.filter(r => ['submitted', 'under_review'].includes(r.status)).length}
                    </span>
                    <span className="stat-label typography-caption">In Progress</span>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </div>
    );
  };

  // Render requests content
  const renderRequests = () => {
    const userRequests = role === 'submitter' 
      ? requests.filter(r => r.user?.id === 'current-user') // Simplified for demo
      : requests;

    return (
      <div className="requests-content">
        <div className="content-header mb-4">
          <h2 className="typography-h2">
            {role === 'submitter' ? 'My Requests' : 'All Requests'}
          </h2>
          <p className="typography-caption text-muted">
            {userRequests.length} request{userRequests.length !== 1 ? 's' : ''} found
          </p>
        </div>

        {isLoading ? (
          renderLoading()
        ) : userRequests.length > 0 ? (
          renderRequestList(userRequests, role !== 'submitter')
        ) : (
          renderEmptyState(
            'No Requests Found',
            role === 'submitter' 
              ? 'You haven\'t submitted any requests yet.' 
              : 'No requests have been submitted to the system.',
            role === 'submitter' ? 'Submit Your First Request' : null,
            role === 'submitter' ? () => onContextChange('submit') : null
          )
        )}
      </div>
    );
  };

  // Render review queue content
  const renderReviewQueue = () => {
    const pendingRequests = requests.filter(r => ['submitted', 'under_review'].includes(r.status));

    return (
      <div className="review-content">
        <div className="content-header mb-4">
          <h2 className="typography-h2">Review Queue</h2>
          <p className="typography-caption text-muted">
            {pendingRequests.length} request{pendingRequests.length !== 1 ? 's' : ''} awaiting review
          </p>
        </div>

        {isLoading ? (
          renderLoading()
        ) : pendingRequests.length > 0 ? (
          renderRequestList(pendingRequests, true)
        ) : (
          renderEmptyState(
            'No Pending Reviews',
            'All requests have been reviewed. Great work!',
            null,
            null
          )
        )}
      </div>
    );
  };

  // Render placeholder content for new features
  const renderPlaceholder = (title, description, features) => (
    <div className="placeholder-content">
      <Card className="placeholder-card">
        <Card.Body className="text-center">
          <h2 className="typography-h2 mb-3">{title}</h2>
          <p className="typography-body text-muted mb-4">{description}</p>
          
          <div className="feature-list">
            {features.map((feature, index) => (
              <div key={index} className="feature-item mb-3">
                <div className="feature-icon">{feature.icon}</div>
                <div className="feature-info">
                  <h5 className="typography-h3">{feature.name}</h5>
                  <p className="typography-caption text-muted">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>
          
          <Badge bg="info" className="coming-soon-badge">
            Coming Soon
          </Badge>
        </Card.Body>
      </Card>
    </div>
  );

  // Render colored tiles
  const renderColoredTiles = () => (
    <Row className="colored-tiles">
      <Col md={4} className="mb-4">
        <Card className="tile tile-blue">
          <Card.Body>
            <h5 className="tile-title">Tile 1</h5>
            <p className="tile-description">Description for Tile 1</p>
          </Card.Body>
        </Card>
      </Col>
      <Col md={4} className="mb-4">
        <Card className="tile tile-green">
          <Card.Body>
            <h5 className="tile-title">Tile 2</h5>
            <p className="tile-description">Description for Tile 2</p>
          </Card.Body>
        </Card>
      </Col>
      <Col md={4} className="mb-4">
        <Card className="tile tile-gradient">
          <Card.Body>
            <h5 className="tile-title">Gradient Tile</h5>
            <p className="tile-description">Description for Gradient Tile</p>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  );

  // Main content renderer
  const renderContent = () => {
    switch (context) {
      case 'overview':
        return renderOverview();
      
      case 'requests':
        return renderRequests();
      
      case 'review':
        if (role === 'submitter') {
          return renderEmptyState('Access Denied', 'You don\'t have permission to view the review queue.');
        }
        return renderReviewQueue();
      
      case 'submit':
        return (
          <div className="submit-content">
            <Card>
              <Card.Header>
                <h3 className="typography-h3">Submit New Request</h3>
              </Card.Header>
              <Card.Body>
                {activeFormConfig ? (
                  <p className="typography-body">Form configuration loaded: {activeFormConfig.name}</p>
                ) : (
                  <p className="typography-body text-muted">Loading form configuration...</p>
                )}
                <Badge bg="info">Form Integration Coming Soon</Badge>
              </Card.Body>
            </Card>
          </div>
        );
      
      case 'archive':
        return renderPlaceholder(
          'Archive Portfolio',
          'Searchable portfolio of all active company names with data visualization and dependency tracking.',
          [
            { icon: '🔍', name: 'Advanced Search', description: 'Search through all archived requests and approved names' },
            { icon: '📊', name: 'Data Visualization', description: 'Visual insights into naming patterns and trends' },
            { icon: '🔗', name: 'Dependency Network', description: 'Inter-product dependency visualization' }
          ]
        );
      
      case 'guidelines':
        return renderPlaceholder(
          'Naming Guidelines',
          'Comprehensive guidelines for submitting naming requests, managed through a headless CMS.',
          [
            { icon: '📋', name: 'Best Practices', description: 'Guidelines for effective naming conventions' },
            { icon: '✅', name: 'Approval Criteria', description: 'What makes a name likely to be approved' },
            { icon: '🚫', name: 'Common Mistakes', description: 'Pitfalls to avoid when submitting requests' }
          ]
        );
      
      case 'resources':
        return renderPlaceholder(
          'Resources & Documentation',
          'Centralized resources for reviewers and administrators.',
          [
            { icon: '📚', name: 'Documentation', description: 'Comprehensive guides and references' },
            { icon: '🔧', name: 'Tools', description: 'Helpful tools for review and analysis' },
            { icon: '📞', name: 'Support', description: 'Contact information and help resources' }
          ]
        );
      
      case 'configure':
        if (role !== 'admin') {
          return renderEmptyState('Access Denied', 'You don\'t have permission to access system configuration.');
        }
        return renderPlaceholder(
          'System Configuration',
          'Administrative controls for managing forms, users, and system settings.',
          [
            { icon: '📝', name: 'Form Builder', description: 'Create and manage dynamic request forms' },
            { icon: '👥', name: 'User Management', description: 'Manage user roles and permissions' },
            { icon: '⚙️', name: 'System Settings', description: 'Configure application behavior and preferences' }
          ]
        );
      
      default:
        return renderOverview();
    }
  };

  return (
    <div className="content-area">
      <Container fluid className="h-100">
        {isLoading ? renderLoading() : (
          <>
            {renderColoredTiles()}
            {renderContent()}
          </>
        )}
      </Container>
    </div>
  );
};

export default ContentArea;
